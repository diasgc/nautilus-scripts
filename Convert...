#! /bin/bash
# diasgc 2023 April
#
# debug to ~/convert.log
# exec 22>$HOME/convert.log
# BASH_XTRACEFD=22
# set -x

SAVEIFS=$IFS
IFS=$'\n'
b=($NAUTILUS_SCRIPT_SELECTED_FILE_PATHS)
IFS=$SAVEIFS
len=${#b[@]}
mime=$(file -b --mime-type "${b[0]}")
ffopt1="-hide_banner -loglevel quiet"
ffopt2="-movflags use_metadata_tags"


case "$mime" in
  "image/jpeg") ops=(true "heic" false "avif" false "png");;
  "video/"*) ops=(true "hevc" false "xvid" false "h264");;
  "audio/"*) ops=(true "mp3" true "m4a" false "flac" false "ogg" false "opus");;
  *) zenity --error --text="\"$mime\" not supported yet"; exit 1;;
esac

op=$(zenity --list --radiolist --title "Convert to" --text "$mime" --column "" --column "Format" ${ops[@]})
# ql=$(zenity --scale --text="Quality" --min-value=-1 --max-value=100 --value=-1)

heicopts(){
  optKeys=('-L ' '-p quality=' '-p preset=' '-p tune=' '-p tu-intra-depth=' '-p complexity=' '-p chroma=')
  opts=$(zenity zenity --width=500 --forms --title "x265" \
    --text "HEIC x265 Codec Options" \
    --add-combo "Quality" --combo-values "default|10|20|30|40|50|60|65|70|75|80|85|90|95|98|Lossless" \
    --add-combo "Preset" --combo-values "default|ultrafast|superfast|veryfast|faster|fast|medium|slow|slower|veryslow|placebo" \
    --add-combo "Tune" --combo-values "default|psnr|ssim|grain|zerolatency|fastdecode" \
    --add-combo "TU intra depth" --combo-values "default|1|2|3|4" \
    --add-combo "Complexity" --combo-values "default|10|20|30|40|50|60|70|80|90|100" \
    --add-combo "Chroma" --combo-values "default|420|422|444" \
  )
  
  optval=($(sed 's/|/\n/g' <<< $opts))
  out=
  test "x${optVal[0]}" == "xLossless" && out="-L " && ${optVal[0]}="default"
  for i in "${!optVal[@]}"; do
    test "x${optVal[$i]}" == "xdefault" || out="$out ${optKeys[$i]}${optVal[$i]}"
  done
  echo $out
}

x265opts(){
  optKeys=('-preset' '-tune' '-crf')
  opts=$(zenity zenity --width=500 --forms --title "x265" \
    --text "x265 Codec Options" \
    --add-combo "Preset" --combo-values "default|ultrafast|superfast|veryfast|faster|fast|medium|slow|slower|veryslow|placebo" \
    --add-combo "Tune" --combo-values "default|psnr|ssim|grain|zerolatency|fastdecode" \
    --add-combo "CRF" --combo-values "default|10|14|18|22|24|26|28|30|32|34|36|40|44|48" \
  )
  optval=($(sed 's/|/\n/g' <<< $opts))
  out=
  for i in "${!optVal[@]}"; do
    test "x${optVal[$i]}" == "xdefault" || out="$out ${optKeys[$i]} ${optVal[$i]}"
  done
  echo $out
}

case "$op" in
  heic) cmd="do-heif"; ffEncoder="$(heicopts)"; ffSufix=""; ffFormat="heic"; test "x$ql" -gt "x0" && ffEncoder="$ffEncoder -q $ql";;
  avif) cmd="do-heif"; ffEncoder="-A"; ffSufix=""; ffFormat="avif"; test "x$ql" -gt "x0" && ffEncoder="$ffEncoder -q $ql";;
  hevc) cmd="do-ffmpeg"; ffEncoder="-c:v libx265 $(x265opts)"; ffSufix="-HEVC"; ffFormat="mp4";;
  h264) cmd="do-ffmpeg"; ffEncoder="-c:v libx264"; ffSufix="-H264"; ffFormat="mp4";;
  xvid) cmd="do-ffmpeg"; ffEncoder="-c:v libxvid"; ffSufix="-xvid"; ffFormat="mp4";;
  flac) cmd="do-ffmpeg"; ffEncoder="-c:a libflac"; ffSufix=""; ffFormat="flac";;
  mp3)  cmd="do-ffmpeg"; ffEncoder="-c:a libmp3lame"; ffSufix=""; ffFormat="mp3";;
  m4a)  cmd="do-ffmpeg"; ffEncoder="-c:a aac"; ffSufix=""; ffFormat="m4a";;
  ogg)  cmd="do-ffmpeg"; ffEncoder="-c:a libogg"; ffSufix=""; ffFormat="ogg";;
  opus) cmd="do-ffmpeg"; ffEncoder="-c:a libopus"; ffSufix="-opus"; ffFormat="ogg";;
  *) cmd="echo";;
esac

case "$ql" in
  50) ;;
  *) cmd="$cmd -q $ql";;
esac

affProgress(){
  # output: size=    4056kB time=00:04:10.56 bitrate= 132.6kbits/s speed=68.2x
  duration=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$file")
  timeStart=$(date +%s)
  fname=$(basename "$file")
  iHead="# File: ${fname%.*} ($count of $len)\nSize: $(du -hs $file | awk '{print $1}')B Duration: $(date -d @$duration -u +%H:%M:%S)"
  tpos=0
  pStart=
  while [ -e /proc/$PID ]; do
    tpos=$(grep 'out_time=' "$log" | tail -n1 | sed 's/out_time=//')
    tpos=$(date -d "$p" +'%s')
    ela=$(( $(date +%s) - timeStart ))
    test "x$tpos" == "x0" && eta="n/a" || eta=$(date -d @$(awk 'BEGIN{print int(('$ela' / '$tpos') * ('$duration' - '$tpos'))}') -u +%H:%M:%S)
    echo "${iHead}\nFrame: $frame of $frames Elapsed: $(date -d @$ela -u +%H:%M:%S) ETA: $eta"
    echo $(( 100 * frame / frames ))
  done | zenity --progress --width=500 --title="Converting"\
    --text="Initializing please wait..." --percentage=0\
    --auto-close --auto-kill  
}

vffProgress(){
  duration=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$file")
  frames=$(ffprobe -v 0 -select_streams v -show_entries stream=nb_frames -of default=noprint_wrappers=1:nokey=1 "$file")
  frame=0; eta=0; ela=0
  fname=$(basename "$file")
  iHead="# File: ${fname%.*} ($count of $len)\nSize: $(du -hs $file | awk '{print $1}')B Duration: $(date -d @$duration -u +%H:%M:%S)"
  while [ -e /proc/$PID ]; do
    frame=$(grep 'frame=' "$log" | tail -n1 | sed 's/frame=//')
    ela=$(( $(date +%s) - timeStart ))
    test "x$frame" == "x0" && eta="n/a" || eta=$(date -d @$(awk 'BEGIN{print int(('$ela' / '$frame') * ('$frames' - '$frame'))}') -u +%H:%M:%S)
    #if [ "$vframe" -gt "$frame" ]; then
    #  frame=$vframe
    #  eta=$(date -d @$(awk 'BEGIN{print int(('$ela' / '$frame') * ('$frames' - '$frame'))}') -u +%H:%M:%S)
    #fi
    echo "${iHead}\nFrame: $frame of $frames Elapsed: $(date -d @$ela -u +%H:%M:%S) ETA: $eta"
    echo $(( step + pfrac * frame / frames ))
  done | zenity --progress --width=500 --title="Converting"\
    --text="Initializing please wait..." --percentage=0\
    --auto-close --auto-kill
}

do-ffmpeg(){
  timeStart=$(date +%s)
  fname=$(basename "$file")
  log=/tmp/ffmpeg.log
  ffmpeg ${ffopt1} -i "$file" -progress ${log} ${ffopt2} ${ffEncoder} "${file%.*}${ffSufix}.${ffFormat}" & PID=$! && ${mime:0:1}ffProgress
  rm -f $log
}

do-heif(){
  iHead="# File: ${fname%.*} ($count of $len)\nSize: $(du -hs $file | awk '{print $1}')B"
  echo $iHead
  echo $(( step ))
  heif-enc $ffEncoder "$file" | zenity --progress --width=500 --title="Converting"\
    --text="Initializing please wait..." --percentage=0\
    --auto-close --auto-kill
}

count=1
pfrac=$(( 100 / len ))
for i in "${!b[@]}"; do
  #pstep=$(echo $i*100/$len|bc -l)
  step=$(( i * pfrac ))
  #echo $step
  file="${b[$i]}"
  mime2=$(file -b --mime-type "$file")
  if [ "$mime" == "$mime2" ]; then
    #echo "# Converting $file"
    $cmd "${file}" $sfx
  fi
  ((count+=1))
done
# | zenity --width=500 --progress --title="Converting..." --text="Converting" --percentage=0 --auto-close --auto-kill

set +x
