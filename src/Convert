#!/bin/bash
# diasgc 2023 April

root="$(dirname $(readlink .f ${BASH_SOURCE[0]}))"
source "$root/.common"
source "$root/.ffutils"

#startDebug

checkDeps ffmpeg libheif-examples inkscape

log=/tmp/ffmpeg.log
logpid="/tmp/convert-$(date +'%s').pid"

do-ffmpeg(){
  timeStart=$(date +%s)
  duration=$(ffprobeDuration "$file")
  fname=$(basename "$file")
  fsize=$(fileSize "$file")
  ffmpeg ${ffopt1} -i "$file" -progress ${log} ${ffopt2} ${ffEncoder} "${file%.*}${ffSufix}.${ffFormat}" & PID=$! && { echo "$PID" > $logpid; } && ffProgress
  #rm -f $log
}

do-heif(){
  iHead="# File: ${fname%.*} ($count of $fileListLen)\nSize: $(du -hs $file | awk '{print $1}')B"
  echo $iHead
  echo $(( step ))
  heif-enc $ffEncoder "$file"
}

abort(){
  PID=$(cat $logpid)
  local dtype="--info"
  if [ -e /proc/$PID ]; then
    kill -SIGKILL $PID
    dtype="--error"
  fi
  rm -f $log $logpid
  zenity $dtype --text "$errMsg"
  endDebug
  exit
}

# Main program
trap abort INT TERM EXIT

# verify mimetypes in filelist
mimeList=()
for f in "${fileList[@]}"; do
  m=$(mimetype -b "$f")
  case $m in
    "audio/"*) mimeList+=("audio");;
    "video/"*) mimeList+=("video");;
    "image/"*) mimeList+=("image");;
    * ) mimeList+=("$m");;
  esac
done
# remove duplicates and sort
mimeList=( $(printf "%s\n" ${mimeList[@]} | sort -n | uniq ) )

case ${#mimeList[@]} in
  0 ) zenity $z --warning --text="No mimetypes available. Exiting."
      exit 1
      ;;
  1 ) mime=${mimeList[0]}
      ;;
  * ) optMime=()
      for i in ${mimeList[@]}; do optMime+=(false); optMime+=($i); done
      ${optMime[0]}=true
      mime=$(zenity --list --radiolist --title "Multiple Types" \
        --text "Select one of the selected types" \
        --column "" --column "Format" ${optMime[@]}
      );;
esac
ffopt1="-hide_banner -loglevel quiet"
ffopt2="-movflags use_metadata_tags"

case "$mime" in
  "image") ops=(true "jpeg" false "heic" false "avif" false "avif/aom" false "png");;
  "video") ops=(true "hevc" false "xvid" false "h264");;
  "audio") ops=(true "mp3" false "m4a" false "flac" false "ogg" false "opus");;
  *) zenity --error --text="\"$mime\" not supported yet"; exit 1;;
esac

op=$(zenity --list --radiolist --title "Convert to" \
      --text "$mime" --column "" --column "Format" \
      ${ops[@]} \
    )

case "$op" in
  jpeg) cmd="do-ffmpeg"
        ffEncoder="$(jpegOpts)"
        ffSufix="";       ffFormat="jpg"
        ;;
  heic) cmd="do-heif"
        ffEncoder="$(heicopts)"
        ffSufix="";       ffFormat="heic"
        ;;
  avif) cmd="do-heif"
        ffEncoder="-A"
        ffSufix="";       ffFormat="avif"
        ;;
  avif/aom) cmd="do-ffmpeg"
        ffEncoder="-c:v libaom-av1 -still-picture true $(aomOpts)"
        ffSufix="";       ffFormat="avif"
        ;;
  hevc) cmd="do-ffmpeg"
        ffEncoder="-c:v libx265 $(x265opts)"
        ffSufix="-HEVC";  ffFormat="mp4"
        ;;
  h264) cmd="do-ffmpeg"
        ffEncoder="-c:v libx264"
        ffSufix="-H264";  ffFormat="mp4"
        ;;
  xvid) cmd="do-ffmpeg"
        ffEncoder="-c:v libxvid"
        ffSufix="-xvid";  ffFormat="mp4"
        ;;
  flac) cmd="do-ffmpeg"
        ffEncoder="-c:a flac $(flacOpts)"
        ffSufix="";       ffFormat="flac"
        ;;
  mp3)  cmd="do-ffmpeg"
        ffEncoder="-c:a libmp3lame"
        ffSufix="";       ffFormat="mp3"
        ;;
  m4a)  cmd="do-ffmpeg"
        ffEncoder="-c:a aac"
        ffSufix="";       ffFormat="m4a"
        ;;
  ogg)  cmd="do-ffmpeg"
        ffEncoder="-c:a libvorbis $(vorbisOpts)"
        ffSufix="";       ffFormat="ogg"
        ;;
  opus) cmd="do-ffmpeg"
        ffEncoder="-c:a libopus $(opusOpts)"
        ffSufix="-opus";  ffFormat="ogg"
        ;;

  *) exit;;

esac

count=1
pfrac=$(( 100 / fileListLen ))


for i in "${!fileList[@]}"; do
  step=$(( i * pfrac ))
  file="${fileList[$i]}"
  mime2=$(mimetype -b "${file}")
  case ${mime2} in ${mime}*) ${cmd} "${file}" ${sfx};; esac
  (( count+=1 ))
done | zenity --progress --width=500 --title="Converting" \
  --text="Initializing please wait..." \
  --percentage=0 \
  --auto-close --auto-kill
