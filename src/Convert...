#! /bin/bash
# diasgc 2023 April

debug2file=false

x265presets="ultrafast|superfast|veryfast|faster|fast|medium|slow|slower|veryslow|placebo"
x265tunes="psnr|ssim|grain|zerolatency|fastdecode"

# debug script to ~/convert.log
if $debug2file; then  
  exec 22>$HOME/convert.log &>>$HOME/convert.log
  BASH_XTRACEFD=22
  set -x
fi

# usage: range <from> <to> <step> <delim>
rangeInt(){
  out=
  for (( r=$1; r<$2 ; r=r+$3 )); do out="$out$4$r" ; done
  echo "${out:1}"
}

libopusOpts(){
  keys=('-vbr' '-compression_level' '-frame_duration' '-packet_loss' '-application' '-cutoff' '-mapping_family' '-apply_phase_inv' '-b:a ')
  opts=$(zenity zenity --width=500 --forms --title "x265" \
    --text "Opus Encoder Options" \
    --add-combo "VBR mode" --combo-values "default|off|on|constrained" \
    --add-combo "Compression Level" --combo-values "default|$(rangeInt 0 10 1 '|')" \
    --add-combo "Frame duration (ms)" --combo-values "default|2.5|5|10|20|40|60" \
    --add-combo "Packet Loss" --combo-values "default|$(rangeInt 0 100 15 '|')" \
    --add-combo "Application" --combo-values "default|voip|audio|lowdelay" \
    --add-combo "Cutoff (Hz)" --combo-values "default|4000|6000|8000|12000|20000" \
    --add-combo "Mapping Family" --combo-values "default|-1|0|1" \
    --add-combo "Phase Inversion" --combo-values "default|0|1" \
    --add-combo "Bitrate" --combo-values "default|24k|32k|48k|56k|64k|80k|96k|128k|192k|224k|256k" \
  )
  values=($(sed 's/|/\n/g' <<< $opts))
  out=
  for i in "${!values[@]}"; do
    test "x${values[$i]}" == "xdefault" || out="$out ${keys[$i]} ${values[$i]}"
  done
  echo $out
}

libvorbisOpts(){
  keys=('-vbr' '-compression_level' '-frame_duration' '-packet_loss' '-application' '-cutoff' '-mapping_family' '-apply_phase_inv' '-b:a')
  opts=$(zenity zenity --width=500 --forms --title "x265" \
    --text "Vorbis Encoder Options" \
    --add-combo "Bitrate" --combo-values "default|$(rangeInt 10 100 2 '|')|Lossless" \
    --add-combo "VBR mode" --combo-values "default|off|on|constrained" \
    --add-combo "Compression Level" --combo-values "default|$(rangeInt 0 10 1 '|')" \
    --add-combo "Frame duration (ms)" --combo-values "default|2.5|5|10|20|40|60" \
    --add-combo "Packet Loss" --combo-values "default|$(rangeInt 0 100 15 '|')" \
    --add-combo "Application" --combo-values "default|voip|audio|lowdelay" \
    --add-combo "Cutoff (Hz)" --combo-values "default|4000|6000|8000|12000|20000" \
    --add-combo "Mapping Family" --combo-values "default|-1|0|1" \
    --add-combo "Phase Inversion" --combo-values "default|0|1" \
    --add-combo "Bitrate" --combo-values "default|24k|32k|48k|56k|64k|80k|96k|128k|192k|224k|256k" \
  )
  values=($(sed 's/|/\n/g' <<< $opts))
  out=
  for i in "${!values[@]}"; do
    test "x${values[$i]}" == "xdefault" || out="$out ${keys[$i]} ${values[$i]}"
  done
  echo $out
}

flacOpts(){
  keys=('-compression_level' '-lpc_coeff_precision' '-lpc_type' \
    '-lpc_passes' '-min_partition_order' '-max_partition_order' \
    '-prediction_order_method' '-ch_mode' 'exact_rice_parameters' 'multi_dim_quant'\
  )
  opts=$(zenity zenity --width=500 --forms --title "x265" \
    --text "FLAC Encoder Options" \
    --add-combo "Compression" --combo-values "default|$(rangeInt 0 12 1 '|')" \
    --add-combo "LPC Coefficient" --combo-values "default|$(rangeInt 0 15 1 '|')" \
    --add-combo "LPC Type" --combo-values "default|none|fixed|levinson|cholesky" \
    --add-combo "LPC passes" --combo-values "default|$(rangeInt 1 10 1 '|')" \
    --add-entry "Min. Partition Order" \
    --add-entry "Max. Partition Order" \
    --add-combo "Partition Order Method" --combo-values "default|estimation|2level|4level|8level|search|log" \
    --add-combo "Channel Mode" --combo-values "default|auto|indep|left_side|right_side|mid_side" \
    --add-combo "Exact Rice Params." --combo-values "default|0|1" \
    --add-combo "Multi Dimensional Quantization" --combo-values "default|0|1" \
  )
  values=($(sed 's/|/\n/g' <<< $opts))
  out=
  for i in "${!values[@]}"; do
    test "x${values[$i]}" == "xdefault" || out="$out ${keys[$i]} ${values[$i]}"
  done
  echo $out
}


heicopts(){
  keys=('-L ' '-p quality=' '-p preset=' '-p tune=' '-p tu-intra-depth=' '-p complexity=' '-p chroma=')
  opts=$(zenity zenity --width=500 --forms --title "x265" \
    --text "HEIC x265 Codec Options" \
    --add-combo "Quality" --combo-values "default|$(rangeInt 10 100 2 '|')|Lossless" \
    --add-combo "Preset" --combo-values "default|${x265presets}" \
    --add-combo "Tune" --combo-values "default|${x265tunes}" \
    --add-combo "TU intra depth" --combo-values "default|1|2|3|4" \
    --add-combo "Complexity" --combo-values "default|$(rangeInt 10 100 2 '|')" \
    --add-combo "Chroma" --combo-values "default|420|422|444" \
  )
  values=($(sed 's/|/\n/g' <<< $opts))
  out=
  test "x${values[0]}" == "xLossless" && out="-L " && ${values[0]}="default"
  for i in "${!values[@]}"; do
    test "x${values[$i]}" == "xdefault" || out="$out ${keys[$i]}${values[$i]}"
  done
  echo $out
}

x265opts(){
  keys=('-preset' '-tune' '-crf')
  opts=$(zenity zenity --width=500 --forms --title "x265" \
    --text "x265 Codec Options" \
    --add-combo "Preset" --combo-values ${x265presets} \
    --add-combo "Tune" --combo-values ${x265tunes} \
    --add-combo "CRF" --combo-values "default|$(rangeInt 0 50 2 '|')" \
  )
  values=($(sed 's/|/\n/g' <<< $opts))
  out=
  for i in "${!values[@]}"; do
    test "x${values[$i]}" == "xdefault" || out="$out ${keys[$i]} ${values[$i]}"
  done
  echo $out
}

SAVEIFS=$IFS
IFS=$'\n'
b=($NAUTILUS_SCRIPT_SELECTED_FILE_PATHS)
IFS=$SAVEIFS
len=${#b[@]}
mime=$(file -b --mime-type "${b[0]}")
ffopt1="-hide_banner -loglevel quiet"
ffopt2="-movflags use_metadata_tags"

case "$mime" in
  "image/jpeg") ops=(true "heic" false "avif" false "png");;
  "video/"*) ops=(true "hevc" false "xvid" false "h264");;
  "audio/"*) ops=(true "mp3" false "m4a" false "flac" false "ogg" false "opus");;
  *) zenity --error --text="\"$mime\" not supported yet"; exit 1;;
esac

op=$(zenity --list --radiolist --title "Convert to" --text "$mime" --column "" --column "Format" ${ops[@]})

case "$op" in
  heic) cmd="do-heif"; ffEncoder="$(heicopts)"; ffSufix=""; ffFormat="heic";;
  avif) cmd="do-heif"; ffEncoder="-A"; ffSufix=""; ffFormat="avif";;
  hevc) cmd="do-ffmpeg"; ffEncoder="-c:v libx265 $(x265opts)"; ffSufix="-HEVC"; ffFormat="mp4";;
  h264) cmd="do-ffmpeg"; ffEncoder="-c:v libx264"; ffSufix="-H264"; ffFormat="mp4";;
  xvid) cmd="do-ffmpeg"; ffEncoder="-c:v libxvid"; ffSufix="-xvid"; ffFormat="mp4";;
  flac) cmd="do-ffmpeg"; ffEncoder="-c:a libflac"; ffSufix=""; ffFormat="flac";;
  mp3)  cmd="do-ffmpeg"; ffEncoder="-c:a libmp3lame"; ffSufix=""; ffFormat="mp3";;
  m4a)  cmd="do-ffmpeg"; ffEncoder="-c:a aac"; ffSufix=""; ffFormat="m4a";;
  ogg)  cmd="do-ffmpeg"; ffEncoder="-c:a libvorbis"; ffSufix=""; ffFormat="ogg";;
  opus) cmd="do-ffmpeg"; ffEncoder="-c:a libopus $(libopusOpts)"; ffSufix="-opus"; ffFormat="ogg";;
  *) cmd="echo";;
esac

ffProgress(){
  duration=$(ffprobe -v quiet -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$file")
  timeStart=$(date +%s)
  fname=$(basename "$file")
  iHead="# File: ${fname%.*} ($count of $len)\nSize: $(du -hs "$file" | awk '{print $1}')B Duration: $(date -d @$duration -u +%H:%M:%S)"
  tpos=0
  while [ -e /proc/$PID ]; do
    tpos=$(grep 'out_time=' "$log" | tail -n1 | sed 's/out_time=//')
    tpos=$(TZ=utc date -d "1970-01-01 $tpos" +'%s')
    ela=$(( $(date +%s) - timeStart ))
    test "x$tpos" == "x0" && eta="n/a" || eta=$(date -d @$(awk 'BEGIN{print int(('$ela' / '$tpos') * ('$duration' - '$tpos'))}') -u +%H:%M:%S)
    echo "${iHead}\nElapsed: $(date -d @$ela -u +%H:%M:%S) ETA: $eta"
    echo $(awk 'BEGIN{print int(('$step' + '$pfrac' * '$tpos' / '$duration'))}')
  done
}

do-ffmpeg(){
  timeStart=$(date +%s)
  fname=$(basename "$file")
  log=/tmp/ffmpeg.log
  ffmpeg ${ffopt1} -i "$file" -progress ${log} ${ffopt2} ${ffEncoder} "${file%.*}${ffSufix}.${ffFormat}" & PID=$! && ffProgress
  rm -f $log
}

do-heif(){
  iHead="# File: ${fname%.*} ($count of $len)\nSize: $(du -hs $file | awk '{print $1}')B"
  echo $iHead
  echo $(( step ))
  heif-enc $ffEncoder "$file"
}

count=1
pfrac=$(( 100 / len ))
for i in "${!b[@]}"; do
  step=$(( i * pfrac ))
  file="${b[$i]}"
  mime2=$(file -b --mime-type "$file")
  test "x$mime" == "x$mime2" && $cmd "${file}" $sfx
  ((count+=1))
done | zenity --progress --width=500 --title="Converting" \
  --text="Initializing please wait..." \
  --percentage=0 \
  --auto-close --auto-kill

if $debug2file; then
  set +x
fi
